日期：2020-06-09 19:18
环境：python 2.7.5
----------------------
【变量名称规定】
只能由大小写字母、数字和下划线组成
首字母只能是大小写字母或下划线
区分大小写

C语言需要声明变量类型：
int     a=12
char    c='hello'

python不需要声明变量类型（和shell一样）：
a=12
c='hello'

【可以做简单的运算】
>>> x=2
>>> y=8

和shell不同，python调用变量时，变量前面不需要加$
>>> print x+y           #求和
10
>>> print x-y           #求差
-6
>>> print x*y           #求积
16
>>> print x/y           #求商
0
>>> print x%y           #取余
2

和shell不同，python可以直接计算小数：
>>> print 8.8-4.4
4.4
>>> print 2**3          #求幂（**表示次方）
8
>>> print 10.0/3        #被除数为小数形式时，结果也为小数。
3.33333333333
>>> print 10.0//3       #//表示小于且最接近结果的整数
3.0

【递增、递减、递乘、递除】
和shell不同，python只支持x+=1,不支持x++。
>>> x=2
>>> x+=1            #即x=x+1
>>> print x
3
>>> x+=8            #即x=x+8
>>> print x
11

【比较大小】
和shell不同，python使用>、>=、<、<=、==、!=

【逻辑运算】
和shell不同，python使用and（相当于&&）、not（相当于!）、or（相当于||）

【python变量类型】
1.数字
不用担心数字类型，可以用type(变量）查看类型。
>>> x=1024
>>> type(x)
<type 'int'>

变量开头需要注明进制，无表示10进制，0b开头表示2进制，0开头表示8进制，0x开头表示16进制。
# touch abc.txt             #新建一个文本abc.txt
# ls -l abc.txt             #查看abc.txt权限
-rw-r--r--. 1 root root 0 6月   9 08:54 abc.txt      #该文本权限位644（8进制）

# python                    #打开python解释器
>>> import os               #倒入系统os模块
>>> os.chmod('/root/abc.txt',777)       #用os模块修改abc.txt权限为777
>>> quit()                              #退出python解释器
# ls -l abc.txt             #查看abc.txt权限
-r----x--t. 1 root root 0 6月   9 08:54 abc.txt      #这时abc.txt的权限出现混乱，因为777是10进制。

# python                    #打开python解释器
>>> import os               #倒入系统os模块
>>> os.chmod('/root/abc.txt',0777)       #用os模块修改abc.txt权限为0777
>>> quit()                               #退出python解释器
# ls -l abc.txt
-rwxrwxrwx. 1 root root 0 6月   9 08:54 abc.txt      #使用8进制数字修改权限，结果正确。


2.字符串
一定要有引号，不然会报错：
>>> abc='12345abcde'           #定义一个字符串变量

支持字符串截取：
>>> abc[:3]                     #从开始取到第3位
'123'
>>> abc[0:3]                    #从第0位后取到第3位前
'123'
>>> abc[3:8]                    #从第3位后取到第8位前
'45abc'
>>> abc[5:]                     #从第5位后取到末位
'abcde'
>>> abc[0:-1]                   #从第0位后取到倒数第1位前
'12345abcd'
>>> abc                         #什么都不加代表截取全部
'12345abcde'
>>> abc[5]                      #取第5位
'a'


3.列表
一个变量可以存放多个值；
>>> a=[12,34,56,78,90]          #定义一个列表变量
>>> b=['a1','b2','c3','d4','e5']    #如果有字符串，同样需要用引号

>>> a[0]                        #取变量a第0位的值
12
>>> b[1]                        #取变量b第1位的值
'b2'
>>> b[0:2]                      #取变量b第0位后到第2位前的值
['a1', 'b2']

>>> b[4]='E5'                   #修改变量b第4位的值为E5
>>> b
['a1', 'b2', 'c3', 'd4', 'E5']
>>> b.append('f6')              #追加变量b的值
>>> b
['a1', 'b2', 'c3', 'd4', 'E5', 'f6']

>>> 12 in a                     #判断变量a里有没有12
True
>>> 'e5' in b                   #判断变量b里有没有e5
False


4.元组
一个变量可以存放多个值，且不可以改变：
>>> A=(12,34,56,78,90)
>>> B=('a1','b2','c3','d4','e5')
>>> A[0]
12
>>> B[0]
'a1'
>>> B[5]=E5                     #元组更改和追加会报错
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'E5' is not defined


5.字典
一个变量可以存放多个值，用注释表示位（下标是有含义的字符）：
>>> tom={'name':'Tom','age':18,'height':180}            #定义一个字典tom

>>> tom['name']                 #tom的name位
'Tom'
>>> tom['age']                  #tom的age位
18
>>> tom['height']               #tom的height位
180
>>> tom                         #调用tom值没有顺序
{'age': 19, 'name': 'Tom', 'height': 180}

>>> tom['age']=19               #修改tom的age位
>>> tom['age']
19
>>> tom['weight']=65            #追加tom的weight位
>>> tom['weight']
65


【变量分类】
[按存储类型分类]
标准类型：数值、字符串
容器类型：列表、元组、字典

[按更新类型分类]
可变类型：列表、字典
不可变类型：数字、字符串、元组

[按访问模型分类]
直接访问：数字
顺序访问：字符串、列表、元组
映射访问；字典
