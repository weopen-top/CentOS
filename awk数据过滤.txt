 日期：2020-03-24 09:50
环境：Red Hat Enterprise Linux Server release 7.2 (Maipo)
--------------------------------------------------------
作用：过滤数据，数据统计。
【格式】
awk [选项] '[条件]{指令语句}' 文件.. ..
前置命令 | awk [选项] '[条件]{指令语句}'
条件用于匹配，指令用于对匹配的行进行操作,纯字符串需要""。

完整格式：
awk 'BEGIN{} 条件{} END{}' 文件
    所有的条件写在{}中
    BEGIN{} #读入第一行文本之前执行。一般用来初始化操作。
    {}      #逐行读入文本执行相应的处理，一般用来做运算。
    END{}   #处理完最后一行文本之后执行。一般用来输出处理结果。

【选项】
-F      #指定分隔符，默认为空格。多个用[]括起来，例如[,:]。

-v      #调用外部Shell变量。
例如：
i=1
awk -v x=$i 'BEGIN{print x}'
10
【内置变量】
FS      #保存或设置字段分隔符，例如：FS=":"
$n      #第n列字段，多个用逗号隔开。例如：$1表示第1列。
$0      #当前读入的整行文本内容
NF      #记录当前处理行的字段个数（列数）
NR      #记录当前已读入行的数量（行数）

【变量的运算】
运算符：
+、-、*、/、%
++、--、+=、-=、*=、/=

【条件】（注意：字符串需要加双引号）
[正则匹配]：
    /正则表达式/
    ～         #匹配该列
    !～        #取反，表示不匹配。
    例如：awk -F: '$5~/root/' /etc/passwd      #查找第5列包含root的行

[数值/字符串比较]:
    == != > >= < <=
    例1：awk -F: '$1=="root"' /etc/passwd    #精确查找/etc/passwd里第一列是root，且不包含其他字符的行。
    例2：awk -F: 'BEGIN{x=0} $3>=1000{x++} END{print x}' /etc/passwd      #统计普通用户数量。

[逻辑比较测试]:
    &&      #逻辑与，期待多个条件成立
    ||      #逻辑或，只要一个条件成立即可。

【指令】（多条语句可以分号隔开）
    print        #打印
    $列数         #显示该列，可以,号隔开。
    $NF          #显示最后一列
    \t           #对齐

【if指令】
单分支:
if(条件){编辑指令}
双分支：
if(条件){编辑指令1}else{编辑指令2}
多分支：
if(条件){编辑指令1}else if(条件){编辑指令2}.. ..else{编辑指令N}

例子：统计普通用户个数x和系统用户个数y。
awk 'BEGIN{x=0,y=0} {if($3>=1000){x++}else{y++}} END{print x,y} /etc/passwd

【while指令】
while(){}
例子：统计/etc/passwd出现root的次数
分析
awk -F: {
i=0;
while(i<=NF){
if($i~/root/){x++};
i++
}
} END{print x}' /etc/passwd
整合
awk -F: '{i=0;while(i<=NF){if($i~/root/){x++};i++}} END{print x}' /etc/passwd

【awk数组定义及使用】
定义数组
格式：数组名[下标]=元素值
调用数组
格式：数组名[下标]
遍历数组
格式：for(变量 in 数组名){print 变量名[变量]}
例子1：
tom['gender']=male
tom['age']=18
tom['phone']=16605713751

例子2：统计出现的次数
awk '{IP[$1]++}'        #统计第1列出现的次数
awk '{IP[$1]++} END{for(i in IP){print i,IP[i]}}' /var/log/httpd/access_log | awk '$2>500{print $1}'         #统计访问httpd的IP及次数。然后过滤出访问量大于500的IP。